# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Ui_MainWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import _thread
import json
import math
import os
import sys
import time
import traceback

import pygame
import requests
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from mutagen.mp3 import MP3
from NetEase import apis

from MyQLabel import MyQLabel

class MSlider(QtWidgets.QSlider):

    def __init__(self, parent=None):
        super(MSlider, self).__init__(parent)

    def mousePressEvent(self, event):
        if event.button() == Qt.LeftButton:
            super().mousePressEvent(event)      # 调用父级的单击事件，听说这样能不影响进度条原来的拖动
            val_por = event.pos().x() / self.width()    # 获取鼠标在进度条的相对位置
            self.setValue(int(val_por * self.maximum()))	# 改变进度条的值


class CircleImage(QWidget):
    '''绘制圆形图片'''

    def __init__(self, parent=None):
        super(CircleImage, self).__init__(parent)
        self.resize(100, 100)
        self.circle_image = None

    def set_image(self, image):
        '''设置绘制的图片'''
        self.circle_image = image
        self.update()

    def paintEvent(self, event):
        '''重写绘制事件'''
        super(CircleImage, self).paintEvent(event)
        painter = QPainter(self)
        painter.setRenderHint(QPainter.Antialiasing, True)  # 设置抗锯齿
        pen = Qt.NoPen
        painter.setPen(pen)                            		# 设置取消描边边框
        brush = QBrush(self.circle_image)
        painter.setBrush(brush)								# 设置绘制内容
        painter.drawRoundedRect(self.rect(), self.width() / 2, self.height() / 2)

class Ui_Dialog(QMainWindow):
    pygame.mixer.init()
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(1019, 659)
        Dialog.setStyleSheet("#Dialog {\n"
"    background-color: rgb(0, 0, 0);\n"
"}\n"
"#widget {\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-radius: 20px;\n"
"}\n"
"#closeButton {\n"
"    border: none;\n"
"    background-color: rgb(255, 255, 255);\n"
"}\n"
"#closeButton:hover {\n"
"    color: white;\n"
"    background-color: rgb(232, 16, 16);\n"
"}")
        self.verticalLayout = QtWidgets.QVBoxLayout(Dialog)
        self.verticalLayout.setObjectName("verticalLayout")
        self.widget = QtWidgets.QWidget(Dialog)
        self.widget.setStyleSheet("border-radius:0px;")
        self.widget.setObjectName("widget")
        self.button_play_replace = QtWidgets.QPushButton(self.widget)
        self.button_play = QtWidgets.QPushButton(self.widget)
        self.button_play.setGeometry(QtCore.QRect(490, 579, 35, 35))
        self.button_play.setStyleSheet("QPushButton#button_play{\n"
"    background-color: rgba(125, 125, 125, 30);\n"
"    border-radius:17px;\n"
"    background-image: url(:/png/images/play_button.png);\n"
"}\n"
"QPushButton#button_play:hover{\n"
"    background-color: rgba(125, 125, 125, 50);\n"
"};")
        self.button_play.setText("")
        self.button_play.setObjectName("button_play")
        self.label_minimize = QtWidgets.QPushButton(self.widget)
        self.label_minimize.setGeometry(QtCore.QRect(910, 20, 21, 16))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(12)
        self.label_minimize.setFont(font)
        self.label_minimize.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_minimize.setObjectName("label_minimize")
        self.label_song_name_2 = MyQLabel(self.widget)
        self.label_song_name_2.setGeometry(QtCore.QRect(80, 604, 161, 20))
        self.label_song_name_2.setStyleSheet("font: 10pt \"微软雅黑\";\n"
"color: rgb(77, 77, 77);")
        self.label_song_name_2.setObjectName("label_song_name_2")
        self.label = MyQLabel(self.widget)
        self.label.setGeometry(QtCore.QRect(840, 23, 35, 12))
        self.label.setText("")
        self.label.setPixmap(QtGui.QPixmap(":/png/images/vip4.png"))
        self.label.setScaledContents(True)
        self.label.setObjectName("label")
        self.label_search_icon = MyQLabel(self.widget)
        self.label_search_icon.setGeometry(QtCore.QRect(279, 23, 16, 16))
        self.label_search_icon.setStyleSheet("")
        self.label_search_icon.setText("")
        self.label_search_icon.setPixmap(QtGui.QPixmap(":/png/images/search_ico.png"))
        self.label_search_icon.setScaledContents(True)
        self.label_search_icon.setObjectName("label_search_icon")
        self.button_home = QtWidgets.QPushButton(self.widget)
        self.button_home.setGeometry(QtCore.QRect(229, 23, 50, 50))
        self.button_home.setText("HOME")
        self.button_home.setObjectName("button_home")
        self.button_home.setStyleSheet("QPushButton#button_home{border-radius:5px; border: 1px solid; background-color: rgba(150, 150, 150, 0.5)}")
        self.button_next_song = QtWidgets.QPushButton(self.widget)
        self.button_next_song.setGeometry(QtCore.QRect(538, 583, 25, 25))
        self.button_next_song.setStyleSheet("QPushButton#button_next_song{\n"
"    background-color: rgba(0, 0, 0, 0);\n"
"    background-image: url(:/png/images/next_song.png);\n"
"}\n"
"QPushButton#button_next_song:hover{\n"
"    background-image: url(:/png/images/next_song_pressed.png);\n"
"};")
        self.button_next_song.setText("")
        self.button_next_song.setObjectName("button_next_song")

        self.label_top_avatar = CircleImage(self.widget)
        avatar = QPixmap('./images/nouser.jpg')
        #self.label_top_avatar.set_image(avatar.scaled(self.label_top_avatar.size().width(),self.label_top_avatar.size().height(), Qt.KeepAspectRatio, Qt.SmoothTransformation))
        self.label_top_avatar.set_image(avatar)
        self.label_top_avatar.setGeometry(QtCore.QRect(710, 13, 32, 32))
        self.label_top_avatar.setObjectName("label_top_avatar")

        self.slider_progress = MSlider(self.widget)
        self.slider_progress.setGeometry(QtCore.QRect(308, 613, 411, 21))
        self.slider_progress.setStyleSheet("QSlider::handle:horizontal{width:6px;height:6px;background-color:rgb(57, 175, 234);margin:-2px 0px -2px 0px;border-radius:3px;}\n"
"QSlider::groove:horizontal{height:3px;background-color:rgb(219,219,219);}\n"
"QSlider::add-page:horizontal{background-color:rgb(219,219,219);}\n"
"QSlider::sub-page:horizontal{background-color:rgb(57, 175, 234);}")
        self.slider_progress.setOrientation(QtCore.Qt.Horizontal)
        self.slider_progress.setObjectName("slider_progress")
        self.label_song_name = MyQLabel(self.widget)
        self.label_song_name.setGeometry(QtCore.QRect(80, 582, 161, 20))
        self.label_song_name.setStyleSheet("font: 10pt \"微软雅黑\";\n"
"color: rgb(77, 77, 77);")
        self.label_song_name.setObjectName("label_song_name")
        self.label_main_bg = MyQLabel(self.widget)
        self.label_main_bg.setGeometry(QtCore.QRect(0, 59, 1001, 581))
        self.label_main_bg.setStyleSheet("background-color: rgb(255,255,255);")
        self.label_main_bg.setText("")
        self.label_main_bg.setObjectName("label_main_bg")
        self.label_left_logo = MyQLabel(self.widget)
        self.label_left_logo.setGeometry(QtCore.QRect(0, -1, 191, 51))
        self.label_left_logo.setStyleSheet("background-image: url(:/png/images/left_logo.png);")
        self.label_left_logo.setText("")
        self.label_left_logo.setObjectName("label_left_logo")
        self.label_2 = MyQLabel(self.widget)
        self.label_2.setGeometry(QtCore.QRect(14, 575, 50, 50))
        self.label_2.setText("")
        self.label_2.setScaledContents(False)
        self.label_2.setObjectName("label_2")
        self.label_2.setStyleSheet("QLabel#label_2{border-radius:10px;\n"
                                   "background-image: url(:/png/images/album_default.jpg);\n"
                                   "background-size:100% 100%;}"
                                   "QLabel#label_2:hover{margin-top:1px;}")
        self.label_2.setCursor(Qt.PointingHandCursor)
        self.lineEdit = QtWidgets.QLineEdit(self.widget)
        self.lineEdit.setGeometry(QtCore.QRect(299, 22, 361, 16))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(10)
        self.lineEdit.setFont(font)
        self.lineEdit.setStyleSheet("border-radius:0px;\n"
"background:rgba(0,0,0,0);\n"
"color:white;")
        self.lineEdit.setObjectName("lineEdit")
        self.button_last_song = QtWidgets.QPushButton(self.widget)
        self.button_last_song.setGeometry(QtCore.QRect(450, 583, 25, 25))
        self.button_last_song.setStyleSheet("QPushButton#button_last_song{\n"
"    background-color: rgba(0, 0, 0, 0);\n"
"    background-image: url(:/png/images/last_song.png);\n"
"}\n"
"QPushButton#button_last_song:hover{\n"
"    background-image: url(:/png/images/last_song_pressed.png);\n"
"};")
        self.button_last_song.setText("")
        self.button_last_song.setObjectName("button_last_song")
        self.label_input_search_bg = MyQLabel(self.widget)
        self.label_input_search_bg.setGeometry(QtCore.QRect(270, 15, 411, 31))
        self.label_input_search_bg.setStyleSheet("border-radius:15px;\n"
"font: 10pt \"微软雅黑\";\n"
"margin left: 10px; \n"
"background:rgba(235,235,235,0.5);")
        self.label_input_search_bg.setText("")
        self.label_input_search_bg.setObjectName("label_input_search_bg")
        self.label_progress_left = MyQLabel(self.widget)
        self.label_progress_left.setGeometry(QtCore.QRect(270, 615, 35, 16))
        self.label_progress_left.setStyleSheet("font: 9pt \"微软雅黑\";\n"
"color: rgb(159, 159, 159);")
        self.label_progress_left.setObjectName("label_progress_left")
        self.label_top_bg = MyQLabel(self.widget)
        self.label_top_bg.setGeometry(QtCore.QRect(0, -1, 1001, 60))
        self.label_top_bg.setStyleSheet("background-color: rgb(57, 175, 234);")
        self.label_top_bg.setText("")
        self.label_top_bg.setObjectName("label_top_bg")
        self.label_top_id = MyQLabel(self.widget)
        self.label_top_id.setGeometry(QtCore.QRect(750, 20, 91, 16))
        self.label_top_id.setStyleSheet("QLabel#label_top_id{font: 9pt \"微软雅黑\";\n"
"color:rgba(255,255,255,0.8);}"
"QLabel#label_top_id:hover{color:rgba(255,255,255,1);}")
        self.label_top_id.setObjectName("label_top_id")
        self.label_progress_right = MyQLabel(self.widget)
        self.label_progress_right.setGeometry(QtCore.QRect(727, 615, 35, 16))
        self.label_progress_right.setStyleSheet("font: 9pt \"微软雅黑\";\n"
"color: rgb(159, 159, 159);")
        self.label_progress_right.setObjectName("label_progress_right")
        self.label_close = QtWidgets.QPushButton(self.widget)
        self.label_close.setGeometry(QtCore.QRect(950, 19, 21, 16))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(20)
        self.label_close.setFont(font)
        self.label_close.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_close.setObjectName("label_close")
        self.tableWidget = QtWidgets.QTableWidget(self.widget)
        self.tableWidget.setGeometry(QtCore.QRect(10, 69, 981, 491))
        self.tableWidget.setStyleSheet("font: 9pt \"微软雅黑\";")
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(7)
        self.tableWidget.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(6, item)
        self.lineEdit.returnPressed.connect(self.search_song_lineedit)
        self.tableWidget.setSelectionMode(QAbstractItemView.SingleSelection)
        # self.tableWidget.verticalHeader().setVisible(False)
        self.tableWidget.setEditTriggers(QTableView.NoEditTriggers)
        self.tableWidget.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.tableWidget.setColumnWidth(0, 50)
        self.tableWidget.setColumnWidth(1, 600)
        self.tableWidget.setColumnWidth(2, 150)
        self.tableWidget.setColumnWidth(3, 100)
        self.tableWidget.setColumnWidth(4, 50)
        self.tableWidget.setColumnWidth(5, 0)
        self.tableWidget.setColumnWidth(6, 0)
        self.tableWidget.setFrameShape(QFrame.NoFrame)
        self.tableWidget.horizontalHeader().setDefaultAlignment(Qt.AlignLeft)
        self.tableWidget.horizontalHeaderItem(0).setForeground(QBrush(QColor(101, 101, 101)))
        self.tableWidget.horizontalHeaderItem(1).setForeground(QBrush(QColor(101, 101, 101)))
        self.tableWidget.horizontalHeaderItem(2).setForeground(QBrush(QColor(101, 101, 101)))
        self.tableWidget.horizontalHeaderItem(3).setForeground(QBrush(QColor(101, 101, 101)))
        self.tableWidget.horizontalHeaderItem(4).setForeground(QBrush(QColor(101, 101, 101)))
        self.tableWidget.horizontalHeaderItem(5).setForeground(QBrush(QColor(101, 101, 101)))
        self.tableWidget.horizontalHeaderItem(6).setForeground(QBrush(QColor(101, 101, 101)))
        self.tableWidget.verticalScrollBar().setStyleSheet("QScrollBar{border-radius:3px;width: 6px;}\n"
                                                           "QScrollBar::handle{background:lightgray;border-radius:3px;}\n"
                                                           "QScrollBar::handle:hover{background:gray;}")
        self.tableWidget.setStyleSheet("QTableWidget::item:hover{background:#f0f0f0;}")
        self.tableWidget.setShowGrid(False)
        self.tableWidget.horizontalScrollBar().setVisible(False)
        self.tableWidget.horizontalHeader().setSectionsClickable(False)
        self.tableWidget.verticalHeader().setVisible(False)
        self.tableWidget.setFocusPolicy(Qt.NoFocus)
        self.tableWidget.doubleClicked.connect(self.tableWidget_doubleClicked)
        self.label_top_bg.raise_()
        self.label_input_search_bg.raise_()
        self.label_main_bg.raise_()
        self.button_play.raise_()
        self.label_minimize.raise_()
        self.label_song_name_2.raise_()
        self.label.raise_()
        self.label_search_icon.raise_()
        self.button_next_song.raise_()
        self.label_top_avatar.raise_()
        self.slider_progress.raise_()
        self.label_song_name.raise_()
        self.label_left_logo.raise_()
        self.label_2.raise_()
        self.lineEdit.raise_()
        self.button_last_song.raise_()
        self.label_progress_left.raise_()
        self.label_top_id.raise_()
        self.label_progress_right.raise_()
        self.label_close.raise_()
        self.tableWidget.raise_()
        self.verticalLayout.addWidget(self.widget)
        self.label.setVisible(False)
        self.label_close.setCursor(Qt.PointingHandCursor)
        self.label_close.clicked.connect(self.close_main)
        self.label_minimize.clicked.connect(self.minimize)
        self.label_minimize.setCursor(Qt.PointingHandCursor)
        self.label_top_id.connect_customized_slot(self.show_login_window)
        self.label_top_id.setCursor(Qt.PointingHandCursor)
        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)
        self.auto_login()
        self.button_home.raise_()
        self.button_home.setVisible(False)
        self.userInfo_window = None
        self.home_box = QtWidgets.QGroupBox(self.widget)
        self.home_box.setGeometry(self.tableWidget.geometry())
        self.home_box.setObjectName("home_box")
        self.home_box.raise_()
        #self.home_box.setTitle("Home")
        self.label_title_recomend = MyQLabel(self.home_box)
        self.label_title_recomend.setGeometry(20,20,120,50)
        self.label_title_recomend.setObjectName("label_title_recomend")
        self.label_title_recomend.setText("热门歌单")
        self.label_title_recomend.setStyleSheet("font: 20pt \"微软雅黑\";\n"
                                      "color: black;\n"
                                      "border-color: rgb(237, 237, 237);")
        self.label_playlist_top = MyQLabel(self.home_box)
        self.label_playlist_top.setGeometry(40, 100, 140, 140)
        self.label_playlist_top.setObjectName('label_playlist_top')
        self.label_playlist_top.setStyleSheet( "border:1px solid;\n"
                                      "border-color: rgb(237, 237, 237);"
                                      "border-radius: 5px;"
                                      "background-image: url(./images/default_album.jpg);")
        self.label_playlist_top.raise_()


        self.label_playlist_first = MyQLabel(self.home_box)
        self.label_playlist_first.setGeometry(230, 100, 140, 140)
        self.label_playlist_first.setObjectName('label_playlist_first')
        self.label_playlist_first.setStyleSheet("border:1px solid;\n"
                                                "border-color: rgb(237, 237, 237);"
                                                "border-radius: 5px;"
                                                "background-image: url(./images/default_album.jpg);")
        self.label_playlist_first.raise_()


        self.label_playlist_second = MyQLabel(self.home_box)
        self.label_playlist_second.setGeometry(420, 100, 140, 140)
        self.label_playlist_second.setObjectName('label_playlist_second')
        self.label_playlist_second.setStyleSheet("border:1px solid;\n"
                                                "border-color: rgb(237, 237, 237);"
                                                "border-radius: 5px;"
                                                 "background-image: url(./images/default_album.jpg);")
        self.label_playlist_top.raise_()


        self.label_playlist_third = MyQLabel(self.home_box)
        self.label_playlist_third.setGeometry(610, 100, 140, 140)
        self.label_playlist_third.setObjectName('label_playlist_third')
        self.label_playlist_third.setStyleSheet("border:1px solid;\n"
                                                "border-color: rgb(237, 237, 237);"
                                                "border-radius: 5px;"
                                                "background-image: url(./images/default_album.jpg);")
        self.label_playlist_third.raise_()


        self.label_playlist_fouth = MyQLabel(self.home_box)
        self.label_playlist_fouth.setGeometry(800, 100, 140, 140)
        self.label_playlist_fouth.setObjectName('label_playlist_fouth')
        self.label_playlist_fouth.setStyleSheet("border:1px solid;\n"
                                                "border-color: rgb(237, 237, 237);"
                                                "border-radius: 5px;"
                                                "background-image: url(./images/default_album.jpg);")
        self.label_playlist_fouth.raise_()

        self.label_playlist_fifth = MyQLabel(self.home_box)
        self.label_playlist_fifth.setGeometry(40, 290, 140, 140)
        self.label_playlist_fifth.setObjectName('label_playlist_fifth')
        self.label_playlist_fifth.setStyleSheet("border:1px solid;\n"
                                                "border-color: rgb(237, 237, 237);"
                                                "border-radius: 5px;"
                                                "background-image: url(./images/default_album.jpg);")
        self.label_playlist_fifth.raise_()

        self.label_playlist_sixth = MyQLabel(self.home_box)
        self.label_playlist_sixth.setGeometry(230, 290, 140, 140)
        self.label_playlist_sixth.setObjectName('label_playlist_sixth')
        self.label_playlist_sixth.setStyleSheet("border:1px solid;\n"
                                                "border-color: rgb(237, 237, 237);"
                                                "border-radius: 5px;"
                                                "background-image: url(./images/default_album.jpg);")
        self.label_playlist_sixth.raise_()

        self.label_playlist_seventh = MyQLabel(self.home_box)
        self.label_playlist_seventh.setGeometry(420, 290, 140, 140)
        self.label_playlist_seventh.setObjectName('label_playlist_seventh')
        self.label_playlist_seventh.setStyleSheet("border:1px solid;\n"
                                                 "border-color: rgb(237, 237, 237);"
                                                 "border-radius: 5px;"
                                                  "background-image: url(./images/default_album.jpg);")
        self.label_playlist_seventh.raise_()

        self.label_playlist_eighth = MyQLabel(self.home_box)
        self.label_playlist_eighth.setGeometry(610, 290, 140, 140)
        self.label_playlist_eighth.setObjectName('label_playlist_eighth')
        self.label_playlist_eighth.setStyleSheet("border:1px solid;\n"
                                                "border-color: rgb(237, 237, 237);"
                                                "border-radius: 5px;"
                                                 "background-image: url(./images/default_album.jpg);")
        self.label_playlist_eighth.raise_()

        self.label_playlist_ninth = MyQLabel(self.home_box)
        self.label_playlist_ninth.setGeometry(800, 290, 140, 140)
        self.label_playlist_ninth.setObjectName('label_playlist_ninth')
        self.label_playlist_ninth.setStyleSheet("border:1px solid;\n"
                                                "border-color: rgb(237, 237, 237);"
                                                "border-radius: 5px;"
                                                "background-image: url(./images/default_album.jpg);")
        self.label_playlist_ninth.raise_()

        self.label_playlist_top_title = MyQLabel(self.home_box)
        self.label_playlist_top_title.setGeometry(self.label_playlist_top.geometry().left(), self.label_playlist_top.geometry().top() + 145, self.label_playlist_top.width()+5, 35)
        self.label_playlist_top_title.setText("数据载入中...")
        self.label_playlist_top_title.setStyleSheet("font: 10pt \"微软雅黑\";\n")
        self.label_playlist_top_title.setWordWrap(True)
        self.label_playlist_top_title.setAlignment(Qt.AlignHCenter)
        self.label_playlist_top_title.raise_()

        self.label_playlist_first_title = MyQLabel(self.home_box)
        self.label_playlist_first_title.setGeometry(self.label_playlist_first.geometry().left(),
                                                    self.label_playlist_first.geometry().top() + 145,
                                                    self.label_playlist_first.width() + 5, 35)
        self.label_playlist_first_title.setText("数据载入中...")
        self.label_playlist_first_title.setStyleSheet("font: 10pt \"微软雅黑\";\n")
        self.label_playlist_first_title.setWordWrap(True)
        self.label_playlist_first_title.setAlignment(Qt.AlignHCenter)
        self.label_playlist_first_title.raise_()

        self.label_playlist_second_title = MyQLabel(self.home_box)
        self.label_playlist_second_title.setGeometry(self.label_playlist_second.geometry().left(),
                                                    self.label_playlist_second.geometry().top() + 145,
                                                    self.label_playlist_second.width() + 5, 35)
        self.label_playlist_second_title.setText("数据载入中...")
        self.label_playlist_second_title.setStyleSheet("font: 10pt \"微软雅黑\";\n")
        self.label_playlist_second_title.setWordWrap(True)
        self.label_playlist_second_title.setAlignment(Qt.AlignHCenter)
        self.label_playlist_second_title.raise_()

        self.label_playlist_third_title = MyQLabel(self.home_box)
        self.label_playlist_third_title.setGeometry(self.label_playlist_third.geometry().left(),
                                                    self.label_playlist_third.geometry().top() + 145,
                                                    self.label_playlist_third.width() + 5, 35)
        self.label_playlist_third_title.setText("数据载入中...")
        self.label_playlist_third_title.setStyleSheet("font: 10pt \"微软雅黑\";\n")
        self.label_playlist_third_title.setWordWrap(True)
        self.label_playlist_third_title.setAlignment(Qt.AlignHCenter)
        self.label_playlist_third_title.raise_()

        self.label_playlist_fouth_title = MyQLabel(self.home_box)
        self.label_playlist_fouth_title.setGeometry(self.label_playlist_fouth.geometry().left(),
                                                    self.label_playlist_fouth.geometry().top() + 145,
                                                    self.label_playlist_fouth.width() + 5, 35)
        self.label_playlist_fouth_title.setText("数据载入中...")
        self.label_playlist_fouth_title.setStyleSheet("font: 10pt \"微软雅黑\";\n")
        self.label_playlist_fouth_title.setWordWrap(True)
        self.label_playlist_fouth_title.setAlignment(Qt.AlignHCenter)
        self.label_playlist_fouth_title.raise_()

        self.label_playlist_fifth_title = MyQLabel(self.home_box)
        self.label_playlist_fifth_title.setGeometry(self.label_playlist_fifth.geometry().left(),
                                                    self.label_playlist_fifth.geometry().top() + 145,
                                                    self.label_playlist_fifth.width() + 5, 35)
        self.label_playlist_fifth_title.setText("数据载入中...")
        self.label_playlist_fifth_title.setStyleSheet("font: 10pt \"微软雅黑\";\n")
        self.label_playlist_fifth_title.setWordWrap(True)
        self.label_playlist_fifth_title.setAlignment(Qt.AlignHCenter)
        self.label_playlist_fifth_title.raise_()

        self.label_playlist_sixth_title = MyQLabel(self.home_box)
        self.label_playlist_sixth_title.setGeometry(self.label_playlist_sixth.geometry().left(),
                                                    self.label_playlist_sixth.geometry().top() + 145,
                                                    self.label_playlist_sixth.width() + 5, 35)
        self.label_playlist_sixth_title.setText("数据载入中...")
        self.label_playlist_sixth_title.setStyleSheet("font: 10pt \"微软雅黑\";\n")
        self.label_playlist_sixth_title.setWordWrap(True)
        self.label_playlist_sixth_title.setAlignment(Qt.AlignHCenter)
        self.label_playlist_sixth_title.raise_()

        self.label_playlist_seventh_title = MyQLabel(self.home_box)
        self.label_playlist_seventh_title.setGeometry(self.label_playlist_seventh.geometry().left(),
                                                    self.label_playlist_seventh.geometry().top() + 145,
                                                    self.label_playlist_seventh.width() + 5, 35)
        self.label_playlist_seventh_title.setText("数据载入中...")
        self.label_playlist_seventh_title.setStyleSheet("font: 10pt \"微软雅黑\";\n")
        self.label_playlist_seventh_title.setWordWrap(True)
        self.label_playlist_seventh_title.setAlignment(Qt.AlignHCenter)
        self.label_playlist_seventh_title.raise_()

        self.label_playlist_eighth_title = MyQLabel(self.home_box)
        self.label_playlist_eighth_title.setGeometry(self.label_playlist_eighth.geometry().left(),
                                                    self.label_playlist_eighth.geometry().top() + 145,
                                                    self.label_playlist_eighth.width() + 5, 35)
        self.label_playlist_eighth_title.setText("数据载入中...")
        self.label_playlist_eighth_title.setStyleSheet("font: 10pt \"微软雅黑\";\n")
        self.label_playlist_eighth_title.setWordWrap(True)
        self.label_playlist_eighth_title.setAlignment(Qt.AlignHCenter)
        self.label_playlist_eighth_title.raise_()

        self.label_playlist_ninth_title = MyQLabel(self.home_box)
        self.label_playlist_ninth_title.setGeometry(self.label_playlist_ninth.geometry().left(),
                                                    self.label_playlist_ninth.geometry().top() + 145,
                                                    self.label_playlist_ninth.width() + 5, 35)
        self.label_playlist_ninth_title.setText("数据载入中...")
        self.label_playlist_ninth_title.setStyleSheet("font: 10pt \"微软雅黑\";\n")
        self.label_playlist_ninth_title.setWordWrap(True)
        self.label_playlist_ninth_title.setAlignment(Qt.AlignHCenter)
        self.label_playlist_ninth_title.raise_()

        self.tableWidget.setVisible(False)
        self.label_line = QtWidgets.QLabel(self.widget)
        self.label_line.setGeometry(QtCore.QRect(0, self.label_2.geometry().top()-10, 1010, 1))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        self.label_line.setFont(font)
        self.label_line.setStyleSheet("font: 9pt \"微软雅黑\";\n"
                                      "color: rgb(103, 103, 103);\n"
                                      "border:1px solid;\n"
                                      "border-color: rgb(237, 237, 237);")
        self.label_line.setText("")
        self.label_line.setObjectName("label_line")
        self.label_line.raise_()
        self.label_playlist_top.setCursor(Qt.PointingHandCursor)
        self.label_playlist_top_title.setCursor(Qt.PointingHandCursor)
        self.label_playlist_first.setCursor(Qt.PointingHandCursor)
        self.label_playlist_first_title.setCursor(Qt.PointingHandCursor)
        self.label_playlist_second.setCursor(Qt.PointingHandCursor)
        self.label_playlist_second_title.setCursor(Qt.PointingHandCursor)
        self.label_playlist_third.setCursor(Qt.PointingHandCursor)
        self.label_playlist_third_title.setCursor(Qt.PointingHandCursor)
        self.label_playlist_fouth.setCursor(Qt.PointingHandCursor)
        self.label_playlist_fouth_title.setCursor(Qt.PointingHandCursor)
        self.label_playlist_fifth.setCursor(Qt.PointingHandCursor)
        self.label_playlist_fifth_title.setCursor(Qt.PointingHandCursor)
        self.label_playlist_sixth.setCursor(Qt.PointingHandCursor)
        self.label_playlist_sixth_title.setCursor(Qt.PointingHandCursor)
        self.label_playlist_seventh.setCursor(Qt.PointingHandCursor)
        self.label_playlist_seventh_title.setCursor(Qt.PointingHandCursor)
        self.label_playlist_eighth.setCursor(Qt.PointingHandCursor)
        self.label_playlist_eighth_title.setCursor(Qt.PointingHandCursor)
        self.label_playlist_ninth.setCursor(Qt.PointingHandCursor)
        self.label_playlist_ninth_title.setCursor(Qt.PointingHandCursor)

        self.playlist_box = QtWidgets.QGroupBox(self.widget)
        self.playlist_box.setGeometry(self.tableWidget.geometry())
        self.playlist_box.raise_()
        self.playlist_box.setStyleSheet("background-color: white;")
        self.playlist_box.setObjectName("playlist_box")
        self.label_playlist_pic = MyQLabel(self.playlist_box)
        self.label_playlist_pic.setGeometry(20,20,185,185)
        self.label_playlist_pic.setStyleSheet("border-radius:10px;\n"
                                                 "background-image: url(./images/default_album.jpg);\n"
                                                                         "background-size:100% 100%;")
        self.label_playlist_pic.raise_()

        self.label_playlist_icon = MyQLabel(self.playlist_box)
        self.label_playlist_icon.setGeometry(220, 20, 32, 20)
        self.label_playlist_icon.setText("歌单")
        self.label_playlist_icon.setStyleSheet("font: 9pt \"微软雅黑\";\n"
                                               "color: rgb(57, 175, 234);\n"
                                               "border:1px solid;\n"
                                               "border-radius: 2px;\n"
                                               "border-color: rgb(57, 175, 234);")
        self.label_playlist_icon.raise_()

        self.label_playlist_name = MyQLabel(self.playlist_box)
        self.label_playlist_name.setGeometry(260, 18, 500, 20)
        self.label_playlist_name.setText("歌单名")
        self.label_playlist_name.setStyleSheet("font: 75 14pt \"微软雅黑\";\n"
                                               "color: black;\n")
        self.label_playlist_name.raise_()

        self.label_playlist_author_pic = CircleImage(self.playlist_box)
        self.label_playlist_author_pic.setGeometry(220, 55, 25, 25)
        self.label_playlist_author_pic.set_image(QPixmap('./images/nouser.jpg'))
        self.label_playlist_name.raise_()

        self.label_playlist_author_name = MyQLabel(self.playlist_box)
        self.label_playlist_author_name.setGeometry(252, 56, 100, 20)
        self.label_playlist_author_name.setText("Swaggy-Macro")
        self.label_playlist_author_name.setStyleSheet("font: 9pt \"微软雅黑\";\n"
                                               "color: rgb(80, 125, 175);\n")
        self.label_playlist_author_name.raise_()

        self.label_playlist_create_time = MyQLabel(self.playlist_box)
        self.label_playlist_create_time.setGeometry(360, 56, 100, 20)
        self.label_playlist_create_time.setText("2018-05-02创建")
        self.label_playlist_create_time.setStyleSheet("font: 9pt \"微软雅黑\";\n"
                                                      "color: rgb(103, 103, 103);\n")
        self.label_playlist_create_time.raise_()

        self.button_playlist_playall = QtWidgets.QPushButton(self.playlist_box)
        self.button_playlist_playall.setGeometry(220, 100, 140, 35)
        self.button_playlist_playall.setText("▶  播放全部")
        self.button_playlist_playall.setObjectName("button_playlist_playall")
        self.button_playlist_playall.setStyleSheet("QPushButton#button_playlist_playall{font: 12pt \"微软雅黑\";\n"
                                                  "color: white;\n"
                                                  "border-radius:17px;"
                                                  "border:1px solid;"
                                                  "border-color:white;"
                                                  "background-color: rgb(57, 175, 234)}"
                                                  "QPushButton#button_playlist_playall:hover{background-color: rgb(34, 154, 210)}")
        self.button_playlist_playall.setCursor(Qt.PointingHandCursor)
        self.button_playlist_playall.raise_()

        self.button_playlist_mark = QtWidgets.QPushButton(self.playlist_box)
        self.button_playlist_mark.setGeometry(380, 100, 140, 35)
        self.button_playlist_mark.setText("+ 收藏(294)")
        self.button_playlist_mark.setObjectName("button_playlist_mark")
        self.button_playlist_mark.setStyleSheet("QPushButton#button_playlist_mark{font: 12pt \"微软雅黑\";\n"
                                                   "color: rgb(55, 55, 55);\n"
                                                   "border-radius:17px;"
                                                   "border:1px solid;"
                                                   "border-color:rgb(216, 216, 216);"
                                                   "background-color: rgb(255, 255, 255)}"
                                                   "QPushButton#button_playlist_mark:hover{background-color: rgb(242, 242, 242)}")
        self.button_playlist_mark.setCursor(Qt.PointingHandCursor)
        self.button_playlist_mark.raise_()

        self.label_playlist_tag = MyQLabel(self.playlist_box)
        self.label_playlist_tag.setGeometry(220, 156, 500, 20)
        self.label_playlist_tag.setText("标签: 欧美/流行/民谣")
        self.label_playlist_tag.setStyleSheet("font: 9pt \"微软雅黑\";\n"
                                                      "color: rgb(103, 103, 103);\n")
        self.label_playlist_tag.raise_()

        self.label_playlist_num_info = MyQLabel(self.playlist_box)
        self.label_playlist_num_info.setGeometry(220, 176, 500, 20)
        self.label_playlist_num_info.setText("歌曲: 1224  播放: 9451")
        self.label_playlist_num_info.setStyleSheet("font: 9pt \"微软雅黑\";\n"
                                              "color: rgb(103, 103, 103);\n")
        self.label_playlist_num_info.raise_()

        self.label_playlist_details = MyQLabel(self.playlist_box)
        self.label_playlist_details.setGeometry(20, 216, 960, 40)
        self.label_playlist_details.setWordWrap(True)
        self.label_playlist_details.setText("简介: 听到喜欢的都会加进来，所有有些杂..懒得分类了..")
        self.label_playlist_details.setStyleSheet("font: 9pt \"微软雅黑\";\n"
                                                   "color: rgb(103, 103, 103);\n")
        self.label_playlist_tag.raise_()

        self.tableWidget_Playlist = QtWidgets.QTableWidget(self.playlist_box)
        self.tableWidget_Playlist.setGeometry(QtCore.QRect(20, 259, 940, 251))
        self.tableWidget_Playlist.setStyleSheet("font: 9pt \"微软雅黑\";")
        self.tableWidget_Playlist.setObjectName("tableWidget")
        self.tableWidget_Playlist.setColumnCount(7)
        self.tableWidget_Playlist.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_Playlist.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_Playlist.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_Playlist.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_Playlist.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_Playlist.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_Playlist.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_Playlist.setHorizontalHeaderItem(6, item)
        self.lineEdit.returnPressed.connect(self.search_song_lineedit)
        self.tableWidget_Playlist.setSelectionMode(QAbstractItemView.SingleSelection)
        # self.tableWidget.verticalHeader().setVisible(False)
        self.tableWidget_Playlist.setEditTriggers(QTableView.NoEditTriggers)
        self.tableWidget_Playlist.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.tableWidget_Playlist.setColumnWidth(0, 50)
        self.tableWidget_Playlist.setColumnWidth(1, 600)
        self.tableWidget_Playlist.setColumnWidth(2, 150)
        self.tableWidget_Playlist.setColumnWidth(3, 100)
        self.tableWidget_Playlist.setColumnWidth(4, 50)
        self.tableWidget_Playlist.setColumnWidth(5, 0)
        self.tableWidget_Playlist.setColumnWidth(6, 0)
        self.tableWidget_Playlist.setFrameShape(QFrame.NoFrame)
        self.tableWidget_Playlist.horizontalHeader().setDefaultAlignment(Qt.AlignLeft)
        self.tableWidget_Playlist.horizontalHeaderItem(0).setForeground(QBrush(QColor(101, 101, 101)))
        self.tableWidget_Playlist.horizontalHeaderItem(1).setForeground(QBrush(QColor(101, 101, 101)))
        self.tableWidget_Playlist.horizontalHeaderItem(2).setForeground(QBrush(QColor(101, 101, 101)))
        self.tableWidget_Playlist.horizontalHeaderItem(3).setForeground(QBrush(QColor(101, 101, 101)))
        self.tableWidget_Playlist.horizontalHeaderItem(4).setForeground(QBrush(QColor(101, 101, 101)))
        self.tableWidget_Playlist.horizontalHeaderItem(5).setForeground(QBrush(QColor(101, 101, 101)))
        self.tableWidget_Playlist.horizontalHeaderItem(6).setForeground(QBrush(QColor(101, 101, 101)))
        self.tableWidget_Playlist.verticalScrollBar().setStyleSheet("QScrollBar{border-radius:3px;width: 6px;}\n"
                                                           "QScrollBar::handle{background:lightgray;border-radius:3px;}\n"
                                                           "QScrollBar::handle:hover{background:gray;}")
        self.tableWidget_Playlist.setStyleSheet("QTableWidget::item:hover{background:#f0f0f0;}")
        self.tableWidget_Playlist.setShowGrid(False)
        self.tableWidget_Playlist.horizontalScrollBar().setVisible(False)
        self.tableWidget_Playlist.horizontalHeader().setSectionsClickable(False)
        self.tableWidget_Playlist.verticalHeader().setVisible(False)
        self.tableWidget_Playlist.setFocusPolicy(Qt.NoFocus)
        item = self.tableWidget_Playlist.horizontalHeaderItem(0)
        item.setText("")
        item = self.tableWidget_Playlist.horizontalHeaderItem(1)
        item.setText("音乐标题")
        item = self.tableWidget_Playlist.horizontalHeaderItem(2)
        item.setText("歌手")
        item = self.tableWidget_Playlist.horizontalHeaderItem(3)
        item.setText("专辑")
        item = self.tableWidget_Playlist.horizontalHeaderItem(4)
        item.setText("时长")
        item = self.tableWidget_Playlist.horizontalHeaderItem(5)
        item.setText("")
        item = self.tableWidget_Playlist.horizontalHeaderItem(6)
        item.setText("")
        self.playlist_box.setVisible(False)
        _thread.start_new_thread(self.load_playlist_data,())
        self.label_left_logo.connect_customized_slot(self.return_home)
        self.label_left_logo.setCursor(Qt.PointingHandCursor)
        self.tableWidget_Playlist.doubleClicked.connect(self.tableWidget_Playlist_doubleClicked)

        self.label_playlist_top.connect_customized_slot(self.playlist_top_click)
        self.label_playlist_top_title.connect_customized_slot(self.playlist_top_click)

        self.label_playlist_first.connect_customized_slot(self.playlist_first_click)
        self.label_playlist_first_title.connect_customized_slot(self.playlist_first_click)

        self.label_playlist_second.connect_customized_slot(self.playlist_second_click)
        self.label_playlist_second_title.connect_customized_slot(self.playlist_second_click)

        self.label_playlist_third.connect_customized_slot(self.playlist_third_click)
        self.label_playlist_third_title.connect_customized_slot(self.playlist_third_click)

        self.label_playlist_fouth.connect_customized_slot(self.playlist_fouth_click)
        self.label_playlist_fouth_title.connect_customized_slot(self.playlist_fouth_click)

        self.label_playlist_fifth.connect_customized_slot(self.playlist_fifth_click)
        self.label_playlist_fifth_title.connect_customized_slot(self.playlist_fifth_click)

        self.label_playlist_sixth.connect_customized_slot(self.playlist_sixth_click)
        self.label_playlist_sixth_title.connect_customized_slot(self.playlist_sixth_click)

        self.label_playlist_seventh.connect_customized_slot(self.playlist_seventh_click)
        self.label_playlist_seventh_title.connect_customized_slot(self.playlist_seventh_click)

        self.label_playlist_eighth.connect_customized_slot(self.playlist_eighth_click)
        self.label_playlist_eighth_title.connect_customized_slot(self.playlist_eighth_click)

        self.label_playlist_ninth.connect_customized_slot(self.playlist_ninth_click)
        self.label_playlist_ninth_title.connect_customized_slot(self.playlist_ninth_click)

        self.lyric_box = QtWidgets.QGroupBox(self.widget)
        self.lyric_box.setStyleSheet("background-color: qlineargradient(spread:reflect, x1:0, y1:0, x2:0, y2:1, stop:0 rgba(201, 201, 201, 255), stop:1 rgba(255, 255, 255, 255));")
        self.lyric_box.setObjectName("lyric_box")
        self.lyric_box.setGeometry(QtCore.QRect(0, 59, 1001, 501))

        self.lyric_album_pic_bg = MyQLabel(self.lyric_box)
        self.lyric_album_pic_bg.setGeometry(QtCore.QRect(0, 0, 1001, 491))
        self.lyric_album_pic_bg.setPixmap(QPixmap('./images/lyric_default_album.png'))

        self.lyric_album_pic = CircleImage(self.lyric_box)
        self.lyric_album_pic.setGeometry(QtCore.QRect(64, 189, 175, 173))
        self.lyric_album_pic.set_image(QPixmap('./images/default_album.jpg'))

        self.lyric_song_name = MyQLabel(self.lyric_box)
        self.lyric_song_name.setGeometry(QtCore.QRect(444, 22, 405, 40))
        self.lyric_song_name.setAlignment(Qt.AlignHCenter)
        self.lyric_song_name.setText("In My Feelings")
        self.lyric_song_name.setStyleSheet("background-color: transparent;"
                                           "font: 20pt \"微软雅黑\";")
        self.lyric_song_author = MyQLabel(self.lyric_box)
        self.lyric_song_author.setGeometry(QtCore.QRect(444, 68, 405, 40))
        self.lyric_song_author.setAlignment(Qt.AlignHCenter)
        self.lyric_song_author.setText("Drake - Scorpion")
        self.lyric_song_author.setStyleSheet("background-color: transparent;"
                                             "font: 10pt \"微软雅黑\";"
                                             "color: gray")
        self.tableWidget_lyric = QtWidgets.QTableWidget(self.lyric_box)
        self.tableWidget_lyric.setGeometry(QtCore.QRect(394, 123, 513, 330))
        self.tableWidget_lyric.setColumnCount(1)
        self.tableWidget_lyric.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_lyric.setHorizontalHeaderItem(0, item)
        self.tableWidget_lyric.setFrameShape(QFrame.NoFrame)
        self.tableWidget_lyric.horizontalHeader().setDefaultAlignment(Qt.AlignLeft)
        self.tableWidget_lyric.horizontalHeaderItem(0).setForeground(QBrush(QColor(101, 101, 101)))
        self.tableWidget_lyric.setColumnWidth(0, 510)
        self.tableWidget_lyric.verticalScrollBar().setStyleSheet("QScrollBar{border-radius:3px;width: 6px;background-color: transparent;}\n"
                                                                    "QScrollBar::handle{background:lightgray;border-radius:3px;}\n"
                                                                    "QScrollBar::handle:hover{background:gray;}")
        self.tableWidget_lyric.setStyleSheet("QTableWidget::item:hover{background:#f0f0f0;}")
        self.tableWidget_lyric.setShowGrid(False)
        self.tableWidget_lyric.horizontalScrollBar().setVisible(False)
        self.tableWidget_lyric.horizontalHeader().setSectionsClickable(False)
        self.tableWidget_lyric.verticalHeader().setVisible(False)
        self.tableWidget_lyric.setFocusPolicy(Qt.NoFocus)
        self.tableWidget_lyric.horizontalHeader().setVisible(False)
        self.tableWidget_lyric.setSelectionMode(QAbstractItemView.SingleSelection)
        # self.tableWidget.verticalHeader().setVisible(False)
        self.tableWidget_lyric.setEditTriggers(QTableView.NoEditTriggers)
        self.tableWidget_lyric.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.tableWidget_lyric.setStyleSheet("background-color: transparent;")
        #188 170
        #self.lyric_album_pic_bg.setScaledContents(True)
        self.lyric_box.setVisible(False)
        self.label_2.connect_customized_slot(self.show_lyric)
        self.current_song_id = str(1464325108)

        font = QFont("Microsoft YaHei")
        font.setPointSize(15)
        self.button_lyric_close = QtWidgets.QPushButton(self.lyric_box)
        self.button_lyric_close.setGeometry(QtCore.QRect(930, 20, 16, 16))
        self.button_lyric_close.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.button_lyric_close.setObjectName('button_lyric_close')
        self.button_lyric_close.setFont(font)
        self.button_lyric_close.setStyleSheet("QPushButton#button_lyric_close{background-color: transparent;}QPushButton#button_lyric_close:hover{background-color: rgba(0, 0, 0, 10);}\n"
                                       "")
        self.button_lyric_close.setText("∨")
        self.button_lyric_close.clicked.connect(self.close_lyric)
        self.button_playlist_playall.clicked.connect(self.playall)
        self.playlist_id = []
        self.playlist_picUrl = []
        self.playlist_name = []
        self.playlist_singer = []
        self.current_play_index = 0
        self.play_pause = True
        self.button_last_song.setCursor(Qt.PointingHandCursor)
        self.button_next_song.setCursor(Qt.PointingHandCursor)
        self.button_play.setCursor(Qt.PointingHandCursor)
        self.button_last_song.clicked.connect(self.play_last)
        self.button_next_song.clicked.connect(self.play_next)
        self.button_play.clicked.connect(self.play_song_button_clicked)
        self.first_play = True
        self.button_playlist_mark.clicked.connect(self.mark_playlist)
        self.playlist_id_mark = ''
        self.playlist_mark_list = []
        self.localMusicPlaying = False
        self.button_volume = QtWidgets.QPushButton(self.widget)
        self.button_volume.setGeometry(QRect(820,590,20,24))
        self.button_volume.setText("")
        self.button_volume.setObjectName('button_volume')
        self.button_volume.setStyleSheet("QPushButton#button_volume{\n"
                                       "background-image: url(./images/volume_icon.png);\n"
                                       "}\n")

        self.slider_volume = MSlider(self.widget)
        self.slider_volume.setGeometry(QtCore.QRect(845, 592, 60, 21))
        self.slider_volume.setStyleSheet(
            "QSlider::handle:horizontal{width:6px;height:6px;background-color:rgb(57, 175, 234);margin:-2px 0px -2px 0px;border-radius:3px;}\n"
            "QSlider::groove:horizontal{height:3px;background-color:rgb(219,219,219);}\n"
            "QSlider::add-page:horizontal{background-color:rgb(219,219,219);}\n"
            "QSlider::sub-page:horizontal{background-color:rgb(57, 175, 234);}")
        self.slider_volume.setOrientation(QtCore.Qt.Horizontal)
        self.slider_volume.setObjectName("slider_volume")
        self.slider_volume.setValue(100)
        self.slider_volume.valueChanged.connect(self.set_volume)
        self.button_volume.clicked.connect(self.mute)
        self.button_volume.setCursor(Qt.PointingHandCursor)
        self.tableWidget_Playlist.setContextMenuPolicy(Qt.CustomContextMenu)  ######允许右键产生子菜单
        self.tableWidget_Playlist.customContextMenuRequested.connect(self.Table_Menu_Playlist)  ####右键菜单
        self.tableWidget.setContextMenuPolicy(Qt.CustomContextMenu)
        self.tableWidget.customContextMenuRequested.connect(self.Table_Menu_SearchList)

    def Table_Menu_SearchList(self, pos):
        # rint( pos)
        row_num = -1
        for i in self.tableWidget.selectionModel().selection().indexes():
            row_num = i.row()

        menu = QMenu()
        item1 = QAction(QIcon("./images/play_button.png"),'播放')
        item1.setText("播放")
        menu.addAction(item1)
        item2 = QAction(QIcon("./images/add_2_playlist_icon.png"),'加入')
        item2.setText("加入到播放清单")
        menu.addAction(item2)
        action = menu.exec_(self.tableWidget.mapToGlobal(pos))
        if action == item1:
            try:
                id = self.tableWidget.item(row_num, 5).text()
                picurl = self.tableWidget.item(row_num, 6).text()
                name = self.tableWidget.item(row_num, 1).text()
                singers = self.tableWidget.item(row_num, 2).text()
                self.current_song_id = id
                self.first_play = False
                _thread.start_new_thread(self.play_load_song, (id, picurl, name, singers,))
            except:
                traceback.print_exc()

        elif action == item2:
            try:
                id = self.tableWidget.item(row_num, 5).text()
                picurl = self.tableWidget.item(row_num, 6).text()
                name = self.tableWidget.item(row_num, 1).text()
                singers = self.tableWidget.item(row_num, 2).text()
                self.playlist_id.append(id)
                self.playlist_name.append(name)
                self.playlist_picUrl.append(picurl)
                self.playlist_singer.append(singers)
                print("加入" + singers + "的" + name + "到播放清单")
            except:
                traceback.print_exc()

        else:
            return

    def Table_Menu_Playlist(self, pos):
        # rint( pos)
        row_num = -1
        for i in self.tableWidget_Playlist.selectionModel().selection().indexes():
            row_num = i.row()

        menu = QMenu()
        item1 = QAction(QIcon("./images/play_button.png"),'播放')
        item1.setText("播放")
        menu.addAction(item1)
        item2 = QAction(QIcon("./images/add_2_playlist_icon.png"),'加入')
        item2.setText("加入到播放清单")
        menu.addAction(item2)
        action = menu.exec_(self.tableWidget_Playlist.mapToGlobal(pos))
        if action == item1:
            try:
                id = self.tableWidget_Playlist.item(row_num, 5).text()
                picurl = self.tableWidget_Playlist.item(row_num, 6).text()
                name = self.tableWidget_Playlist.item(row_num, 1).text()
                singers = self.tableWidget_Playlist.item(row_num, 2).text()
                self.current_song_id = id
                self.first_play = False
                _thread.start_new_thread(self.play_load_song, (id, picurl, name, singers,))
            except:
                traceback.print_exc()

        elif action == item2:
            try:
                id = self.tableWidget_Playlist.item(row_num, 5).text()
                picurl = self.tableWidget_Playlist.item(row_num, 6).text()
                name = self.tableWidget_Playlist.item(row_num, 1).text()
                singers = self.tableWidget_Playlist.item(row_num, 2).text()
                self.playlist_id.append(id)
                self.playlist_name.append(name)
                self.playlist_picUrl.append(picurl)
                self.playlist_singer.append(singers)
                print("加入" + singers + "的" + name + "到播放清单")
            except:
                traceback.print_exc()

        else:
            return

    def set_volume(self,value):
        pygame.mixer.music.set_volume(value/100)
        if (value>0):
            self.button_volume.setStyleSheet("QPushButton#button_volume{\n"
                                             "background-image: url(./images/volume_icon.png);\n"
                                             "}\n")
            pygame.mixer.music.set_volume(value/100)
        else:
            self.button_volume.setStyleSheet("QPushButton#button_volume{\n"
                                             "background-image: url(./images/volume_icon_mute.png);\n"
                                             "}\n")
            pygame.mixer.music.set_volume(value/100)

    def mute(self):
        self.button_volume.setStyleSheet("QPushButton#button_volume{\n"
                                         "background-image: url(./images/volume_icon.png);\n"
                                         "}\n")
        if (self.slider_volume.value()>0):
            self.slider_volume.setValue(0)
            pygame.mixer.music.set_volume(0)
            self.button_volume.setStyleSheet("QPushButton#button_volume{\n"
                                             "background-image: url(./images/volume_icon_mute.png);\n"
                                             "}\n")
        else:
            self.slider_volume.setValue(100)
            pygame.mixer.music.set_volume(100)
            self.button_volume.setStyleSheet("QPushButton#button_volume{\n"
                                             "background-image: url(./images/volume_icon.png);\n"
                                             "}\n")

    def check_is_marked(self, text):
        if self.playlist_id_mark in self.playlist_mark_list:
            self.mark_playlist()
        else:
            self.button_playlist_mark.setEnabled(True)
            self.button_playlist_mark.setStyleSheet("QPushButton#button_playlist_mark{font: 12pt \"微软雅黑\";\n"
                                                "color: rgb(55, 55, 55);\n"
                                                "border-radius:17px;"
                                                "border:1px solid;"
                                                "border-color:rgb(216, 216, 216);"
                                                "background-color: rgb(255, 255, 255)}"
                                                "QPushButton#button_playlist_mark:hover{background-color: rgb(242, 242, 242)}")
            self.button_playlist_mark.setText(text)

    def mark_playlist(self):
        self.playlist_mark_list.append(self.playlist_id_mark)
        self.button_playlist_mark.setStyleSheet("QPushButton#button_playlist_mark{font: 12pt \"微软雅黑\";\n"
                                                "color: rgb(200, 200, 200);\n"
                                                "border-radius:17px;"
                                                "border:1px solid;"
                                                "border-color:rgb(216, 216, 216);"
                                                "background-color: rgb(240, 240, 240)}"
                                                "QPushButton#button_playlist_mark:hover{background-color: rgb(242, 242, 242)}")
        self.button_playlist_mark.setEnabled(False)
        self.button_playlist_mark.setText("已收藏")
    def set_play_button_icon(self, pause):
        if (pause):
            self.button_play.setStyleSheet("QPushButton#button_play{\n"
                                           "    background-color: rgba(125, 125, 125, 30);\n"
                                           "    border-radius:17px;\n"
                                           "    background-image: url(./images/pausebutton.png);\n"
                                           "}\n"
                                           "QPushButton#button_play:hover{\n"
                                           "    background-color: rgba(125, 125, 125, 50);\n"
                                           "};")
        else:
            self.button_play.setStyleSheet("QPushButton#button_play{\n"
                                           "    background-color: rgba(125, 125, 125, 30);\n"
                                           "    border-radius:17px;\n"
                                           "    background-image: url(./images/play_button.png);\n"
                                           "}\n"
                                           "QPushButton#button_play:hover{\n"
                                           "    background-color: rgba(125, 125, 125, 50);\n"
                                           "};")

    def play_song_button_clicked(self):
        #self.song_pos_event('./music/' + str(id) + '.mp3')
        if (self.first_play):
            self.play_load_song(self.current_song_id,'http://p2.music.126.net/LfAiSYcf5FLgfvVtLzN77w==/109951165165797187.jpg','Mood', '24kGoldn / iann dior')
            self.play_pause = True
        if (self.play_pause):
            self.set_play_button_icon(True)
            self.play_pause = False
            pygame.mixer.music.unpause()
        else:
            self.set_play_button_icon(False)
            self.play_pause = True
            pygame.mixer.music.pause()

    def play_last(self):
        if (self.current_play_index != 0):
            self.play_load_song(self.playlist_id[self.current_play_index-1], self.playlist_picUrl[self.current_play_index-1], self.playlist_name[self.current_play_index-1],
                                self.playlist_singer[self.current_play_index-1])
            self.current_play_index = self.current_play_index-1
        _thread.start_new_thread(self.show_lyric_thread_without_visible,())

    def play_next(self):
        tmp_index = self.current_play_index +1
        if (tmp_index < len(self.playlist_id)):
            self.play_load_song(self.playlist_id[tmp_index], self.playlist_picUrl[tmp_index], self.playlist_name[tmp_index],
                                self.playlist_singer[tmp_index])
            self.current_play_index = tmp_index
        _thread.start_new_thread(self.show_lyric_thread_without_visible,())

    def playall(self):

        self.playlist_id.clear()
        self.playlist_singer.clear()
        self.playlist_name.clear()
        self.playlist_picUrl.clear()

        for i in range(self.tableWidget_Playlist.rowCount()):
            self.playlist_id.append(self.tableWidget_Playlist.item(i,5).text())
            self.playlist_name.append(self.tableWidget_Playlist.item(i, 1).text())
            self.playlist_singer.append(self.tableWidget_Playlist.item(i, 2).text())
            self.playlist_picUrl.append(self.tableWidget_Playlist.item(i, 6).text())
        self.first_play = False
        self.play_load_song(self.playlist_id[0],self.playlist_picUrl[0],self.playlist_name[0],self.playlist_singer[0])
        self.current_play_index = 0
    def close_lyric(self):
        self.lyric_box.setVisible(False)

    def show_lyric_thread_without_visible(self):
        detail = apis.track.GetTrackDetail(self.current_song_id)
        self.lyric_song_name.setText(detail['songs'][0]['name'])
        if not (os.path.exists('./pics/' + str(detail['songs'][0]['al']['pic']) + '.jpg')):
            image = requests.get(detail['songs'][0]['al']['picUrl'] + "?param=175y173").content
            with open('./pics/' + str(detail['songs'][0]['al']['pic']) + '.jpg', 'wb')as fp:
                fp.write(image)
        self.lyric_album_pic.set_image(
                QPixmap('./pics/' + str(detail['songs'][0]['al']['pic']) + '.jpg'))
        self.lyric_song_author.setText(detail['songs'][0]['name'])
        SingerNames = []
        for singerName in detail['songs'][0]['ar']:
            SingerNames.append(singerName['name'])
        SingerName =str('/'.join(SingerNames))
        self.lyric_song_author.setText(SingerName)
        self.lyric_box.setVisible(True)

    def show_lyric_thread(self):
        if (self.lyric_box.isVisible()):
            self.lyric_box.setVisible(False)
            return
        detail = apis.track.GetTrackDetail(self.current_song_id)
        self.lyric_song_name.setText(detail['songs'][0]['name'])
        if not (os.path.exists('./pics/' + str(detail['songs'][0]['al']['pic']) + '.jpg')):
            image = requests.get(detail['songs'][0]['al']['picUrl'] + "?param=175y173").content
            with open('./pics/' + str(detail['songs'][0]['al']['pic']) + '.jpg', 'wb')as fp:
                fp.write(image)
        self.lyric_album_pic.set_image(
                QPixmap('./pics/' + str(detail['songs'][0]['al']['pic']) + '.jpg'))
        self.lyric_song_author.setText(detail['songs'][0]['name'])
        SingerNames = []
        for singerName in detail['songs'][0]['ar']:
            SingerNames.append(singerName['name'])
        SingerName =str('/'.join(SingerNames))
        self.lyric_song_author.setText(SingerName)
        self.lyric_box.setVisible(True)



    def show_lyric(self):
        _thread.start_new_thread(self.show_lyric_thread, ())


    def return_home(self):
        self.playlist_box.setVisible(False)
        self.tableWidget.setVisible(False)
        self.home_box.setVisible(True)
        self.lyric_box.setVisible(False)

    def playlist_top_click(self):
        try:
            playlistid = self.label_playlist_top_title.objectName()
            
            self.playlist_id_mark = playlistid
            _thread.start_new_thread(self.playlist_show, (playlistid,0))
        except:
            traceback.print_exc()
    def playlist_first_click(self):
        try:
            playlistid = self.label_playlist_first_title.objectName()
            
            self.playlist_id_mark = playlistid
            _thread.start_new_thread(self.playlist_show, (playlistid,0))
        except:
            traceback.print_exc()
    def playlist_second_click(self):
        try:
            playlistid = self.label_playlist_second_title.objectName()
            
            self.playlist_id_mark = playlistid
            _thread.start_new_thread(self.playlist_show, (playlistid,0))
        except:
            traceback.print_exc()
    def playlist_third_click(self):
        try:
            playlistid = self.label_playlist_third_title.objectName()
            
            self.playlist_id_mark = playlistid
            _thread.start_new_thread(self.playlist_show, (playlistid,0))
        except:
            traceback.print_exc()
    def playlist_fouth_click(self):
        try:
            playlistid = self.label_playlist_fouth_title.objectName()
            
            self.playlist_id_mark = playlistid
            _thread.start_new_thread(self.playlist_show, (playlistid,0))
        except:
            traceback.print_exc()
    def playlist_fifth_click(self):
        try:
            playlistid = self.label_playlist_fifth_title.objectName()
            
            self.playlist_id_mark = playlistid
            _thread.start_new_thread(self.playlist_show, (playlistid,0))
        except:
            traceback.print_exc()
    def playlist_sixth_click(self):
        try:
            playlistid = self.label_playlist_sixth_title.objectName()
            
            self.playlist_id_mark = playlistid
            _thread.start_new_thread(self.playlist_show, (playlistid,0))
        except:
            traceback.print_exc()
    def playlist_seventh_click(self):
        try:
            playlistid = self.label_playlist_seventh_title.objectName()
            
            self.playlist_id_mark = playlistid
            _thread.start_new_thread(self.playlist_show, (playlistid,0))
        except:
            traceback.print_exc()
    def playlist_eighth_click(self):
        try:
            playlistid = self.label_playlist_eighth_title.objectName()
            
            self.playlist_id_mark = playlistid
            _thread.start_new_thread(self.playlist_show, (playlistid,0))
        except:
            traceback.print_exc()
    def playlist_ninth_click(self):
        try:
            playlistid = self.label_playlist_ninth_title.objectName()
            
            self.playlist_id_mark = playlistid
            _thread.start_new_thread(self.playlist_show, (playlistid,0))
        except:
            traceback.print_exc()
    def playlist_show(self, playlistid, arg):
        print(playlistid)
        self.playlist_box.setVisible(True)
        playlist = apis.playlist.GetPlaylistInfo(playlistid)['playlist']
        self.label_playlist_details.setText(playlist['description'])
        self.label_playlist_name.setText(playlist['name'])
        self.label_playlist_author_name.setText(playlist['creator']['nickname'])
        if not(os.path.exists('./pics/' + str(playlist['creator']['avatarImgId']) + '.jpg')):
            image = requests.get(playlist['creator']['avatarUrl'] + "?param=25y25").content
            with open('./pics/' + str(playlist['creator']['avatarImgId']) + '.jpg', 'wb')as fp:
                fp.write(image)
        self.label_playlist_author_pic.set_image(QPixmap('./pics/' + str(playlist['creator']['avatarImgId']) + '.jpg'))
        self.button_playlist_mark.setText("+ 收藏("+str(playlist['subscribedCount'])+")")
        timeStamp = time.localtime(playlist['trackUpdateTime']/1000)
        self.label_playlist_create_time.setText(time.strftime("%Y-%m-%d", timeStamp) + "创建")
        self.label_playlist_tag.setText("标签: " + playlist['name'])
        if not(os.path.exists('./pics/' + str(playlist['coverImgId']) + '.jpg')):
            image = requests.get(playlist['coverImgUrl'] + "?param=185y185").content
            with open('./pics/' + str(playlist['coverImgId']) + '.jpg', 'wb')as fp:
                fp.write(image)
        self.label_playlist_pic.setStyleSheet("border-radius:10px;\n"
                                              "background-image: url(./pics/" + str(playlist['coverImgId']) + ".jpg);\n"
                                                                          "background-size:100% 100%;")
        self.removeAllRow(self.tableWidget_Playlist)
        for (idx, details) in enumerate (playlist['tracks']):
            row = self.tableWidget_Playlist.rowCount()
            self.tableWidget_Playlist.insertRow(row)
            itemSongName = QTableWidgetItem(details['name'])
            itemSingerName = []
            for singerName in details['ar']:
                itemSingerName.append(singerName['name'])
            itemSingerName = QTableWidgetItem(str('/'.join(itemSingerName)))
            itemAlbum = QTableWidgetItem(details['al']['name'])
            itemDt = (float(details['dt']) / 1000)/60
            secs = str(int(math.modf(itemDt)[0]*60))
            if (len(secs)<2):
                secs = "0" + secs
            itemDt = str(int(itemDt)) + ':' + secs
            itemDt = QTableWidgetItem(itemDt)
            idx = str(idx+1)
            if (len(idx)<2):
                idx = "0" + idx
            itemIdx = QTableWidgetItem(idx)
            itemSongId = QTableWidgetItem(str(details['id']))
            itemSongPicUrl = QTableWidgetItem(str(details['al']['picUrl']))
            self.tableWidget_Playlist.setItem(row, 0, itemIdx)
            self.tableWidget_Playlist.setItem(row, 1, itemSongName)
            self.tableWidget_Playlist.setItem(row, 2, itemSingerName)
            self.tableWidget_Playlist.setItem(row, 3, itemAlbum)
            self.tableWidget_Playlist.setItem(row, 4, itemDt)
            self.tableWidget_Playlist.setItem(row, 5, itemSongId)
            self.tableWidget_Playlist.setItem(row, 6, itemSongPicUrl)
            self.tableWidget_Playlist.item(row, 0).setForeground(QBrush(QColor(217, 195, 211)))
            self.tableWidget_Playlist.item(row, 1).setForeground(QBrush(QColor(101, 101, 121)))
            self.tableWidget_Playlist.item(row, 2).setForeground(QBrush(QColor(101, 101, 101)))
            self.tableWidget_Playlist.item(row, 3).setForeground(QBrush(QColor(101, 101, 101)))
            self.tableWidget_Playlist.item(row, 4).setForeground(QBrush(QColor(101, 101, 101)))
            self.tableWidget_Playlist.item(row, 5).setForeground(QBrush(QColor(101, 101, 101)))
            self.tableWidget_Playlist.item(row, 6).setForeground(QBrush(QColor(101, 101, 101)))

        #QApplication.processEvents()
        self.check_is_marked(self.button_playlist_mark.text())
    def load_playlist_data(self):
        # playlist = apis.playlist.GetPlaylistInfo(19723756)
        # print(len(playlist['playlist']['tracks']))
        playlist = apis.playlist.GetTopPlaylists()
        self.label_playlist_top_title.setText(playlist['list'][0]['name'])
        self.label_playlist_top_title.setObjectName(str(playlist['list'][0]['id']))
        if not(os.path.exists('./pics/' + playlist['list'][0]['coverImgId_str'] + '.jpg')):
            image = requests.get(playlist['list'][0]['coverImgUrl'] + "?param=140y140").content
            with open('./pics/' + playlist['list'][0]['coverImgId_str'] + '.jpg', 'wb')as fp:
                fp.write(image)
        self.label_playlist_top.setStyleSheet("border-radius:10px;\n"
                                   "background-image: url(./pics/" + playlist['list'][0]['coverImgId_str'] + ".jpg);\n"
                                                                               "background-size:100% 100%;")

        self.label_playlist_first_title.setText(playlist['list'][1]['name'])
        self.label_playlist_first_title.setObjectName(str(playlist['list'][1]['id']))
        if not(os.path.exists('./pics/' + playlist['list'][1]['coverImgId_str'] + '.jpg')):
            image = requests.get(playlist['list'][1]['coverImgUrl'] + "?param=140y140").content
            with open('./pics/' + playlist['list'][1]['coverImgId_str'] + '.jpg', 'wb')as fp:
                fp.write(image)
        self.label_playlist_first.setStyleSheet("border-radius:10px;\n"
                                              "background-image: url(./pics/" + playlist['list'][1][
                                                  'coverImgId_str'] + ".jpg);\n"
                                                                      "background-size:100% 100%;")

        self.label_playlist_second_title.setText(playlist['list'][2]['name'])
        self.label_playlist_second_title.setObjectName(str(playlist['list'][2]['id']))
        if not(os.path.exists('./pics/' + playlist['list'][2]['coverImgId_str'] + '.jpg')):
            image = requests.get(playlist['list'][2]['coverImgUrl'] + "?param=140y140").content
            with open('./pics/' + playlist['list'][2]['coverImgId_str'] + '.jpg', 'wb')as fp:
                fp.write(image)
        self.label_playlist_second.setStyleSheet("border-radius:10px;\n"
                                              "background-image: url(./pics/" + playlist['list'][2][
                                                  'coverImgId_str'] + ".jpg);\n"
                                                                      "background-size:100% 100%;")

        self.label_playlist_third_title.setText(playlist['list'][3]['name'])
        self.label_playlist_third_title.setObjectName(str(playlist['list'][3]['id']))
        if not(os.path.exists('./pics/' + playlist['list'][3]['coverImgId_str'] + '.jpg')):
            image = requests.get(playlist['list'][3]['coverImgUrl'] + "?param=140y140").content
            with open('./pics/' + playlist['list'][3]['coverImgId_str'] + '.jpg', 'wb')as fp:
                fp.write(image)
        self.label_playlist_third.setStyleSheet("border-radius:10px;\n"
                                              "background-image: url(./pics/" + playlist['list'][3][
                                                  'coverImgId_str'] + ".jpg);\n"
                                                                      "background-size:100% 100%;")

        self.label_playlist_fouth_title.setText(playlist['list'][11]['name'])
        self.label_playlist_fouth_title.setObjectName(str(playlist['list'][11]['id']))
        if not(os.path.exists('./pics/' + playlist['list'][11]['coverImgId_str'] + '.jpg')):
            image = requests.get(playlist['list'][11]['coverImgUrl'] + "?param=140y140").content
            with open('./pics/' + playlist['list'][11]['coverImgId_str'] + '.jpg', 'wb')as fp:
                fp.write(image)
        self.label_playlist_fouth.setStyleSheet("border-radius:10px;\n"
                                              "background-image: url(./pics/" + playlist['list'][11][
                                                  'coverImgId_str'] + ".jpg);\n"
                                                                      "background-size:100% 100%;")

        self.label_playlist_fifth_title.setText(playlist['list'][5]['name'])
        self.label_playlist_fifth_title.setObjectName(str(playlist['list'][5]['id']))
        if not(os.path.exists('./pics/' + playlist['list'][5]['coverImgId_str'] + '.jpg')):
            image = requests.get(playlist['list'][5]['coverImgUrl'] + "?param=140y140").content
            with open('./pics/' + playlist['list'][5]['coverImgId_str'] + '.jpg', 'wb')as fp:
                fp.write(image)
        self.label_playlist_fifth.setStyleSheet("border-radius:10px;\n"
                                              "background-image: url(./pics/" + playlist['list'][5][
                                                  'coverImgId_str'] + ".jpg);\n"
                                                                      "background-size:100% 100%;")

        self.label_playlist_sixth_title.setText(playlist['list'][6]['name'])
        self.label_playlist_sixth_title.setObjectName(str(playlist['list'][6]['id']))
        if not(os.path.exists('./pics/' + playlist['list'][6]['coverImgId_str'] + '.jpg')):
            image = requests.get(playlist['list'][6]['coverImgUrl'] + "?param=140y140").content
            with open('./pics/' + playlist['list'][6]['coverImgId_str'] + '.jpg', 'wb')as fp:
                fp.write(image)
        self.label_playlist_sixth.setStyleSheet("border-radius:10px;\n"
                                              "background-image: url(./pics/" + playlist['list'][6][
                                                  'coverImgId_str'] + ".jpg);\n"
                                                                      "background-size:100% 100%;")

        self.label_playlist_eighth_title.setText(playlist['list'][8]['name'])
        self.label_playlist_eighth_title.setObjectName(str(playlist['list'][8]['id']))
        if not(os.path.exists('./pics/' + playlist['list'][8]['coverImgId_str'] + '.jpg')):
            image = requests.get(playlist['list'][8]['coverImgUrl'] + "?param=140y140").content
            with open('./pics/' + playlist['list'][8]['coverImgId_str'] + '.jpg', 'wb')as fp:
                fp.write(image)
        self.label_playlist_eighth.setStyleSheet("border-radius:10px;\n"
                                                 "background-image: url(./pics/" + playlist['list'][8][
                                                     'coverImgId_str'] + ".jpg);\n"
                                                                         "background-size:100% 100%;")

        self.label_playlist_seventh_title.setText(playlist['list'][9]['name'])
        self.label_playlist_seventh_title.setObjectName(str(playlist['list'][9]['id']))
        if not(os.path.exists('./pics/' + playlist['list'][9]['coverImgId_str'] + '.jpg')):
            image = requests.get(playlist['list'][9]['coverImgUrl'] + "?param=140y140").content
            with open('./pics/' + playlist['list'][9]['coverImgId_str'] + '.jpg', 'wb')as fp:
                fp.write(image)
        self.label_playlist_seventh.setStyleSheet("border-radius:10px;\n"
                                              "background-image: url(./pics/" + playlist['list'][9][
                                                  'coverImgId_str'] + ".jpg);\n"
                                                                      "background-size:100% 100%;")

        self.label_playlist_ninth_title.setText(playlist['list'][12]['name'])
        self.label_playlist_ninth_title.setObjectName(str(playlist['list'][12]['id']))
        if not(os.path.exists('./pics/' + playlist['list'][12]['coverImgId_str'] + '.jpg')):
            image = requests.get(playlist['list'][12]['coverImgUrl'] + "?param=140y140").content
            with open('./pics/' + playlist['list'][12]['coverImgId_str'] + '.jpg', 'wb')as fp:
                fp.write(image)
        self.label_playlist_ninth.setStyleSheet("border-radius:10px;\n"
                                              "background-image: url(./pics/" + playlist['list'][12][
                                                  'coverImgId_str'] + ".jpg);\n"
                                                                      "background-size:100% 100%;")


        pass
    def show_login_window(self):
        if (self.label_top_id.text()=="未登录"):
            import Ui_Login_Shadow
            try:
                self.login_window = Ui_Login_Shadow.LoginWindow()
                self.login_window.show()
                self.login_window.loginSignal.connect(self.getLogginData)
                self.login_window.exec_()
            except:
                traceback.print_exc()
        else:
            if (self.userInfo_window == None):
                import Ui_UserInfo_Shadow
                self.userInfo_window = Ui_UserInfo_Shadow.UserInfoWindow()
                try:
                    self.userInfo_window.label_follow.setText(str(self.follows))
                    self.userInfo_window.label_followers.setText(str(self.followers))
                    self.userInfo_window.label_news.setText(str(self.news))
                except:
                    traceback.print_exc()
                self.userInfo_window.show()
                MainGeometry = self.geometry()
                self.userInfo_window.setGeometry(
                    QtCore.QRect(MainGeometry.left() + 664, MainGeometry.top() + 60, self.userInfo_window.width(),
                                 self.userInfo_window.height()))
                self.userInfo_window.logoutSignal.connect(self.logout)
                self.userInfo_window.exec_()
            else:
                self.userInfo_window.close()
                self.userInfo_window = None
    def logout(self):
        avatar = QPixmap('./images/nouser.jpg')
        # self.label_top_avatar.set_image(avatar.scaled(self.label_top_avatar.size().width(),self.label_top_avatar.size().height(), Qt.KeepAspectRatio, Qt.SmoothTransformation))
        self.label_top_avatar.set_image(avatar)
        self.label_top_id.setText("未登录")
        self.label.setVisible(False)
        self.userInfo_window.close()
        self.userInfo_window = None
        QApplication.processEvents()
        QApplication.processEvents()
    def auto_login(self):
        if (os.path.exists('./data/config.json')):
            with open('./data/config.json', 'r') as f:
                data = json.loads(f.read())
                try:
                    if (data['autologin'] == 1):
                        res = apis.login.LoginViaCellphone(phone=data['phonenum'],
                                                           password=data['password'],
                                                           ctcode=data['citycode'])
                        print(res)
                        apis.login.WriteLoginInfo(res['content'])
                        if not (os.path.exists('./images/' + str(res['content']['account']['id']) + '.jpg')):
                            image = requests.get(res['content']['profile']['avatarUrl'] + "?param=32y32").content
                            with open('./images/' + str(res['content']['account']['id']) + '.jpg', 'wb')as fp:
                                fp.write(image)
                        avatar = QPixmap('./images/' + str(res['content']['account']['id']) + '.jpg')
                        # self.label_top_avatar.set_image(avatar.scaled(self.label_top_avatar.size().width(),self.label_top_avatar.size().height(), Qt.KeepAspectRatio, Qt.SmoothTransformation))
                        self.label_top_avatar.set_image(avatar)
                        self.label_top_id.setText(res['content']['profile']['nickname'])
                        print(res['content']['profile']['nickname'])
                        self.follows = res['content']['profile']['follows']
                        self.followers = res['content']['profile']['followeds']
                        self.news = res['content']['profile']['eventCount']
                        self.label.setVisible(True)
                        QApplication.processEvents()  # 刷新界
                except:
                    traceback.print_exc()

    def getLogginData(self, data, autoLogin, phonenum, password, citycode):
        self.acc_data = data
        print(data)
        apis.login.WriteLoginInfo(data['content'])
        try:
            if not(os.path.exists('./images/' + str(data['content']['account']['id']) + '.jpg')):
                image = requests.get(data['content']['profile']['avatarUrl'] + "?param=32y32").content
                with open('./images/' + str(data['content']['account']['id']) + '.jpg', 'wb')as fp:
                    fp.write(image)
            avatar = QPixmap('./images/' + str(data['content']['account']['id']) + '.jpg')
            # self.label_top_avatar.set_image(avatar.scaled(self.label_top_avatar.size().width(),self.label_top_avatar.size().height(), Qt.KeepAspectRatio, Qt.SmoothTransformation))
            self.label_top_avatar.set_image(avatar)
            self.label_top_id.setText(data['content']['profile']['nickname'])
            print(data['content']['profile']['nickname'])
            self.label.setVisible(True)
            QApplication.processEvents()#刷新界面
            if (autoLogin):
                with open('./data/config.json', 'w')as fp:
                    tmpdata = '{"autologin":1, "phonenum":"'+phonenum+'", "password":"'+password+'", "citycode":"'+citycode+'"}'
                    fp.write(str(tmpdata))
            else:
                with open('./data/config.json', 'w')as fp:
                    tmpdata = '{"autologin":0, "phonenum":"'+phonenum+'", "password":"'+password+'", "citycode":"'+citycode+'"}'
                    fp.write(str(tmpdata))

            print(tmpdata)
        except:
            traceback.print_exc()

    def play_load_song(self, id, picurl, name, singers):
        self.localMusicPlaying = True
        if (self.first_play):
            id  = self.current_song_id
            self.first_play = False
        self.play_pause = False
        self.set_play_button_icon(True)
        self.current_song_id = id
        url = apis.track.GetTrackAudio([id])['data'][0]['url']
        print(url)
        if (url == None):
            print("收费曲目")
            return
        details = apis.track.GetTrackDetail([id])
        if not(os.path.exists('./pics/' + str(id) + '.jpg')):
            image = requests.get(picurl + "?param=50y50").content
            with open('./pics/' + str(id) + '.jpg', 'wb')as fp:
                fp.write(image)
        self.label_2.setStyleSheet("QLabel#label_2{border-radius:10px;\n"
                                   "background-image: url(./pics/" + str(id) + ".jpg);\n"
                                   "background-size:100% 100%;}"
                                   "QLabel#label_2:hover{margin-top:1px;}")
        self.label_song_name.setText(name)
        self.label_song_name_2.setText(singers)
        ext = str(url).split('.')
        ext = "." + ext[ext.__len__() - 1]
        if not(os.path.exists('./music/' + str(id) + ext)):
            music = requests.get(url).content
            with open('./music/' + str(id) + ext, 'wb')as fp:
                fp.write(music)
        music_file = './music/' + str(id) + ext
        pygame.mixer.music.load(music_file)
        pygame.mixer.music.play(0)
        self.localMusicPlaying = False
        _thread.start_new_thread(self.load_lyric,())
        _thread.start_new_thread(self.song_pos_event, ('163','./music/' + str(id) + ext,))

    def song_pos_event(self, type,path):
        while True:
            if (self.localMusicPlaying):
                break
            if (type=="local"):
                song = MP3(path)
            else:
                song = MP3('./music/' + str(self.current_song_id) + '.mp3')
            song_length = song.info.length // 1
            #print(song_length)
            min = str(int(song_length / 60))
            secs = str(int(math.modf(song_length / 60)[0] * 60))
            if (len(min) <= 1):
                min = "0" + min
            if (len(secs) <= 1):
                secs = "0" + secs
            song_length_label_text = min + ":" + secs
            self.label_progress_right.setText(song_length_label_text)
            pos = int(pygame.mixer.music.get_pos()/1000)
            #print(pos)
            min = str(int(pos / 60))
            secs = str(int(math.modf(pos / 60)[0] * 60))
            #print(secs)
            if (len(min) <= 1):
                    min = "0" + min
            if (len(secs) <= 1):
                    secs = "0" + secs
            self.label_progress_left.setText(min + ":" + secs)
            try:
                self.slider_progress.setSliderPosition(int((pos/song_length)*100))
            except:
                pass
            if (pos/song_length >= 1.0):
                self.play_next()




    def get_music_dict(self, musiclrc):
        dictmusic = {}  # 创建一个空字典，用来装 时间(key) 和 歌词(value)
        listline1 = musiclrc.splitlines()  # 安照行进行切割 把每一行变成列表的一个元素
        for i in listline1:  # 把每一行元素遍历出来，准备切割
            listline2 = i.split("]")  # 以 ] 为切割符
            value = listline2[-1]  # 每一次遍历 把歌词元素(每一次遍历都是最后一个) 赋值给 value
            for j in range(len(listline2) - 1):  # 遍历 listLine2  len(listLine2)-1 除去最后的非时间字符串(歌词)
                keymusic = listline2[j][1:]  # [1:]从索引值为1开始取目的是除去 [
                # keymusic = listline2[j].strip()[1:]  # [1:]从索引值为1开始取目的是除去 [ 如果有缩进的话 需要用strip()去除空格  方案二
                keytime = keymusic.split(":")  # 对遍历的的时间字符串以冒号进行切割
                try:
                    musictime = float(keytime[0]) * 60 + float(keytime[1])  # 计算出每个时间的总秒数
                except:
                    continue
                key = musictime  # 把时间赋值给字典中的 key
                dictmusic[key] = value  # 把value 赋值给对应的时间 key
            # print(dictmusic)
        return dictmusic

    def print_music_dict(self, dictmusic):
        listmuscitime = []  # 创建空列表,把字典的key写进去
        for keys in dictmusic.keys():
                listmuscitime.append(keys)
        listmuscitime.sort()  # 默认对列表进行升序
        time.sleep(listmuscitime[0])
        old_current_id = self.current_song_id
        for index in range(len(listmuscitime)):
            if index > 0:
                if (self.localMusicPlaying):
                    break
                while self.play_pause:
                    continue
                time.sleep((listmuscitime[index] - listmuscitime[index - 1]))  # 两段歌词之间的时间
                while self.play_pause:
                    continue
                print(dictmusic.get(listmuscitime[index]))  # 对列表里面的key值下标遍历,进而用get取字典的value
                self.tableWidget_lyric.scrollToItem(self.tableWidget_lyric.item(index+2,0))
                #self.tableWidget_lyric.item(index-1, 0).setFont(QFont("Microsoft YaHei", 9))
                try:
                    font = QFont("Microsoft YaHei", 11)
                    font.setBold(True)
                    self.tableWidget_lyric.item(index -1, 0).setFont(font)
                    self.tableWidget_lyric.item(index -1, 0).setForeground(QBrush(QColor(0, 0, 0)))
                except:
                    pass
                font = QFont("Microsoft YaHei", 9)
                font.setBold(False)
                try:
                    self.tableWidget_lyric.item(index-2, 0).setFont(font)
                    self.tableWidget_lyric.item(index-2, 0).setForeground(QBrush(QColor(96, 96, 96)))
                except:
                    pass
                if (self.current_song_id!=old_current_id):
                        return
                old_current_id = self.current_song_id

    def load_lyric(self):
        self.tableWidget_lyric.verticalHeader().setDefaultSectionSize(50)
        self.removeAllRow(self.tableWidget_lyric)
        lyric = apis.track.GetTrackLyrics(self.current_song_id)
        print(lyric)
        # for i in lyric_data:
        #     itemLyric = QTableWidgetItem(i)
        #     itemLyric.setTextAlignment(Qt.AlignCenter)
        #     row = self.tableWidget.rowCount()
        #     self.tableWidget_lyric.insertRow(row)
        #     self.tableWidget_lyric.setItem(row, 0,itemLyric)
            #self.tableWidget_lyric.setRowHeight(row, 100)
        #self.get_music_dict(lyric['lrc']['lyric'])
        try:
            dictmusic = self.get_music_dict(lyric['lrc']['lyric'])
            tlyricdict = self.get_music_dict(lyric['tlyric']['lyric'])
            self.insert_lyric_to_tableWidget(dictmusic, tlyricdict)
            self.print_music_dict(dictmusic)
        except:
            for i in range(3):
                if (i < 2):
                    itemLyric = QTableWidgetItem("")
                else:
                    itemLyric = QTableWidgetItem("纯音乐，请您欣赏。")
                itemLyric.setTextAlignment(Qt.AlignCenter)
                row = self.tableWidget_lyric.rowCount()
                self.tableWidget_lyric.insertRow(row)
                self.tableWidget_lyric.setItem(row, 0, itemLyric)
                self.tableWidget_lyric.item(row, 0).setForeground(QBrush(QColor(96, 96, 96)))




    def insert_lyric_to_tableWidget(self, dictmusic, tlyricdict):
        listmuscitime = []  # 创建空列表,把字典的key写进去
        for keys in dictmusic.keys():
                listmuscitime.append(keys)
        listmuscitime.sort()  # 默认对列表进行升序
        #time.sleep(listmuscitime[0])
        for index in range(len(listmuscitime)):
            if index > 0:
                #time.sleep((listmuscitime[index] - listmuscitime[index - 1]))  # 两段歌词之间的时间
                #self.tableWidget_lyric.scrollToItem(self.tableWidget_lyric.item(index - 1, 0))
                tlyric = str(tlyricdict.get(listmuscitime[index]))
                if (tlyric != None and tlyric!='' and tlyric != 'None'):
                    itemLyric = QTableWidgetItem(str(dictmusic.get(listmuscitime[index]))+'\n'+str(tlyric))
                else:
                    itemLyric = QTableWidgetItem(str(dictmusic.get(listmuscitime[index])))
                itemLyric.setTextAlignment(Qt.AlignCenter)
                row = self.tableWidget_lyric.rowCount()
                self.tableWidget_lyric.insertRow(row)
                self.tableWidget_lyric.setItem(row, 0, itemLyric)
                self.tableWidget_lyric.item(row, 0).setForeground(QBrush(QColor(96, 96, 96)))
        for i in range(6):
            itemLyric = QTableWidgetItem("")
            itemLyric.setTextAlignment(Qt.AlignCenter)
            row = self.tableWidget_lyric.rowCount()
            self.tableWidget_lyric.insertRow(row)
            self.tableWidget_lyric.setItem(row, 0, itemLyric)

    def tableWidget_doubleClicked(self, index):
        try:
            id = self.tableWidget.item(index.row(), 5).text()
            picurl = self.tableWidget.item(index.row(), 6).text()
            name = self.tableWidget.item(index.row(), 1).text()
            singers = self.tableWidget.item(index.row(), 2).text()
            self.current_song_id = id
            self.first_play = False
            _thread.start_new_thread(self.play_load_song, (id, picurl, name, singers, ))
        except:
            traceback.print_exc()

    def tableWidget_Playlist_doubleClicked(self, index):
        try:
            id = self.tableWidget_Playlist.item(index.row(), 5).text()
            picurl = self.tableWidget_Playlist.item(index.row(), 6).text()
            name = self.tableWidget_Playlist.item(index.row(), 1).text()
            singers = self.tableWidget_Playlist.item(index.row(), 2).text()
            self.current_song_id = id
            self.first_play = False
            _thread.start_new_thread(self.play_load_song, (id, picurl, name, singers, ))
        except:
            traceback.print_exc()

    def close_main(self):
        self.setVisible(False)
        _thread.start_new_thread(self.show_toast,())

    def show_toast(self):
        from win10toast import ToastNotifier
        toaster = ToastNotifier()
        toaster.show_toast("One Music", "OneMusic已经隐藏到托盘运行啦！", icon_path='./images/icon.ico')

    def minimize(self):
        self.setWindowState(Qt.WindowMinimized)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "OneMusic"))
        self.label_minimize.setText(_translate("Dialog", "一"))
        self.label_song_name_2.setText(_translate("Dialog", "24kGoldn / iann dior"))
        self.label_song_name.setText(_translate("Dialog", "Mood "))
        self.label_progress_left.setText(_translate("Dialog", "00:00"))
        self.label_top_id.setText(_translate("Dialog", "未登录"))
        self.label_progress_right.setText(_translate("Dialog", "00:00"))
        self.label_close.setText(_translate("Dialog", "×"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", ""))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "音乐标题"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "歌手"))
        item = self.tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "专辑"))
        item = self.tableWidget.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "时长"))
        item = self.tableWidget.horizontalHeaderItem(5)
        item.setText(_translate("MainWindow", ""))
        item = self.tableWidget.horizontalHeaderItem(6)
        item.setText(_translate("MainWindow", ""))



    def removeAllRow(self,table):
        for i in range(table.rowCount()):
            table.removeRow(0)

    def search_song_lineedit(self):
        self.tableWidget.setVisible(True)
        self.home_box.setVisible(False)
        self.playlist_box.setVisible(False)
        self.lyric_box.setVisible(False)
        self.removeAllRow(self.tableWidget)
        keyword = self.lineEdit.text()
        res = apis.cloudsearch.GetSearchResult(keyword,limit=100)
        for (idx, details) in enumerate (res['result']['songs']):
            row = self.tableWidget.rowCount()
            self.tableWidget.insertRow(row)
            itemSongName = QTableWidgetItem(details['name'])
            itemSingerName = []
            for singerName in details['ar']:
                itemSingerName.append(singerName['name'])
            itemSingerName = QTableWidgetItem(str('/'.join(itemSingerName)))
            itemAlbum = QTableWidgetItem(details['al']['name'])
            itemDt = (float(details['dt']) / 1000)/60
            secs = str(int(math.modf(itemDt)[0]*60))
            if (len(secs)<2):
                secs = "0" + secs
            itemDt = str(int(itemDt)) + ':' + secs
            itemDt = QTableWidgetItem(itemDt)
            idx = str(idx+1)
            if (len(idx)<2):
                idx = "0" + idx
            itemIdx = QTableWidgetItem(idx)
            itemSongId = QTableWidgetItem(str(details['id']))
            itemSongPicUrl = QTableWidgetItem(str(details['al']['picUrl']))
            self.tableWidget.setItem(row, 0, itemIdx)
            self.tableWidget.setItem(row, 1, itemSongName)
            self.tableWidget.setItem(row, 2, itemSingerName)
            self.tableWidget.setItem(row, 3, itemAlbum)
            self.tableWidget.setItem(row, 4, itemDt)
            self.tableWidget.setItem(row, 5, itemSongId)
            self.tableWidget.setItem(row, 6, itemSongPicUrl)
            self.tableWidget.item(row, 0).setForeground(QBrush(QColor(217, 195, 211)))
            self.tableWidget.item(row, 1).setForeground(QBrush(QColor(101, 101, 121)))
            self.tableWidget.item(row, 2).setForeground(QBrush(QColor(101, 101, 101)))
            self.tableWidget.item(row, 3).setForeground(QBrush(QColor(101, 101, 101)))
            self.tableWidget.item(row, 4).setForeground(QBrush(QColor(101, 101, 101)))
            self.tableWidget.item(row, 5).setForeground(QBrush(QColor(101, 101, 101)))
            self.tableWidget.item(row, 6).setForeground(QBrush(QColor(101, 101, 101)))

    def create_tray(self,app):
        trayIcon = QSystemTrayIcon(QtGui.QIcon("./images/icon.ico"), app)
        menu = QMenu()
        ExitAction = QAction("&退出 OneMusic", self, triggered = self.quit)
        icon_exit = QtGui.QIcon()
        icon_exit.addPixmap(QPixmap('./images/logout_icon.png'), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        ExitAction.setIcon(icon_exit)

        ShowAction = QAction("&打开 OneMusic", self, triggered = self.show_ui)
        icon_show = QtGui.QIcon()
        icon_show.addPixmap(QPixmap('./images/vipcenter_icon.png'), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        ShowAction.setIcon(icon_show)

        LastAction = QAction("&播放上一首", self, triggered=self.play_last)
        icon_last = QtGui.QIcon()
        icon_last.addPixmap(QPixmap('./images/last_song.png'), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        LastAction.setIcon(icon_last)

        NextAction = QAction("&播放下一首", self, triggered=self.play_next)
        icon_next = QtGui.QIcon()
        icon_next.addPixmap(QPixmap('./images/next_song.png'), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        NextAction.setIcon(icon_next)

        PlayAction = QAction("&播放/暂停", self, triggered=self.play_song_button_clicked)
        icon_play = QtGui.QIcon()
        icon_play.addPixmap(QPixmap('./images/play_button.png'), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        PlayAction.setIcon(icon_play)

        NoteAction = QAction("&软件说明", self, triggered=self.show_about)
        icon_note = QtGui.QIcon()
        icon_note.addPixmap(QPixmap('./images/login.ico'), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        NoteAction.setIcon(icon_note)


        menu.addAction(PlayAction)
        menu.addAction(LastAction)
        menu.addAction(NextAction)
        menu.addSeparator()
        menu.addAction(NoteAction)
        menu.addSeparator()
        menu.addAction(ShowAction)
        menu.addAction(ExitAction)


        trayIcon.setContextMenu(menu)
        trayIcon.show()

        trayIcon.activated[QSystemTrayIcon.ActivationReason].connect(self.iconActivated)
    def fromlocal(self):
        path = QFileDialog.getOpenFileName(self,'选择MP3:', filter="音乐(*.MP3)")
        if path[0] != '':
            self.controlSignal.emit("playlocal",path[0])

    def iconActivated(self, reason):
        try:
            if reason == QSystemTrayIcon.DoubleClick:
                if self.isVisible():
                    self.setVisible(False)
                else:
                    self.setVisible(True)
        except:
            traceback.print_exc()

    def show_ui(self):
        self.setVisible(True)
    def quit(self):
        exit(0)
    def show_about(self):
        try:
            from Ui_about import Ui_AboutWindow
            self.aboutWindow = Ui_AboutWindow()
            self.aboutWindow.setupUi(self.aboutWindow)
            self.aboutWindow.show()
            self.aboutWindow.controlSignal.connect(self.about_control)
        except:
            traceback.print_exc()
    def about_control(self, type, path):
        if (type == 'play'):
            self.play_song_button_clicked()
        elif (type == 'last'):
            self.play_last()
        elif (type == 'next'):
            self.play_next()
        elif (type == 'show'):
            self.show_ui()
        elif (type == 'quit'):
            self.quit()
        elif (type == 'playlocal'):
            self.localMusicPlaying = True
            time.sleep(1)
            pygame.mixer.music.stop()
            pygame.mixer.music.load(path)
            pygame.mixer.music.play(0)
            self.label_2.setStyleSheet("QLabel#label_2{border-radius:10px;\n"
                                       "background-image: url(:/png/images/album_default.jpg);\n"
                                       "background-size:100% 100%;}"
                                       "QLabel#label_2:hover{margin-top:1px;}")
            self.label_song_name.setText("本地歌曲")
            self.label_song_name_2.setText("未知歌手")
            self.removeAllRow(self.tableWidget_lyric)
            self.lyric_song_author.setText("未知歌手")
            self.lyric_song_name.setText("本地歌曲")
            self.localMusicPlaying = False
            self.playlist_id.clear()
            self.playlist_singer.clear()
            self.playlist_name.clear()
            self.playlist_picUrl.clear()
            _thread.start_new_thread(self.song_pos_event,('local',path,))
        print(type)
import test_rc